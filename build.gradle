buildscript {
    repositories {
        mavenLocal()
    }
    configurations.maybeCreate('pitest')
    dependencies {
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.4.0'
        pitest 'org.pitest:pitest-junit5-plugin:0.8'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.4.6"
    }
}

plugins {
    id 'java'
    id 'application'
    id "org.springframework.boot" version "2.4.6"
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id "com.jfrog.artifactory" version "4.13.0"
    id "org.sonarqube" version "2.7.1"
    id 'info.solidsoft.pitest' version '1.4.0'
}

mainClassName = "br.com.buspoa.BuspoaApplication"

dependencies {
    implementation project(':contract')
    testImplementation project(':contract')
    testImplementation project(':impl')
    testImplementation project(':integration')
}

ext.mapstructVersion = "1.4.1.Final"
ext.commomExceptionVersion = "1.0.16.RELEASE"

allprojects {

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'
    apply plugin: 'org.sonarqube'

    group = 'br.com'
    version = '1.0'
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    jacoco {
        toolVersion = "0.8.5"
    }

    repositories {
        mavenCentral()
    }

    ext {
        set('springBootVersion', "2.4.6")
        set('springBootAdminVersion', "2.4.1")
        set('springCloudVersion', '3.0.0')
    }

    test {
        useJUnitPlatform()
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        }
    }

    artifactory {
        setContextUrl("${artifactory_contextUrl}")
        resolve {
            repository {
                repoKey = 'libs-release'
                username = "${artifactory_user}"
                password = "${artifactory_password}"
                maven = true
            }
        }
    }

    dependencies {
        implementation "org.mapstruct:mapstruct:${mapstructVersion}"
        implementation 'org.junit.jupiter:junit-jupiter:5.7.0'
        implementation 'org.springframework.boot:spring-boot-starter-webflux'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation "org.springframework.cloud:spring-cloud-starter-sleuth:${springCloudVersion}"
        implementation "org.springframework.cloud:spring-cloud-starter-config:${springCloudVersion}"
        implementation "de.codecentric:spring-boot-admin-starter-client:${springBootAdminVersion}"
        implementation 'de.siegmar:logback-gelf:3.0.0'
        implementation 'commons-io:commons-io:2.11.0'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'io.projectreactor:reactor-test'
        testImplementation 'org.pitest:pitest-junit5-plugin:0.8'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        testAnnotationProcessor "org.projectlombok:lombok"
        testImplementation "org.projectlombok:lombok"
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.setDestination(file("${buildDir}/reports/jacoco/report.xml"))
        html.enabled true
        html.setDestination(file("${buildDir}/reports/jacoco/html"))
        csv.enabled false
    }
}

subprojects {
    apply plugin: 'info.solidsoft.pitest'

    pitest {
        targetClasses = ['br.com.buspoa.*']
        threads = 16
        testPlugin = 'junit5'
        outputFormats = ['XML', 'HTML']
        excludedClasses = ['br.com.buspoa.config.*']
    }
}